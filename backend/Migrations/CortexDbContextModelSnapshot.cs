// <auto-generated />
using System;
using CortexApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CortexApi.Migrations
{
    [DbContext(typeof(CortexDbContext))]
    partial class CortexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CortexApi.Models.ActionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentSessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Latency_ms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tool")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("CortexApi.Models.Classification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NoteId", "Label");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("CortexApi.Models.Edge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromEntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ToEntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RelationType");

                    b.HasIndex("ToEntityId");

                    b.HasIndex("FromEntityId", "ToEntityId", "RelationType");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("CortexApi.Models.Embedding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChunkId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dim")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VectorRef")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChunkId");

                    b.ToTable("Embeddings");
                });

            modelBuilder.Entity("CortexApi.Models.Entity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonicalEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonicalValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MentionCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CanonicalEntityId");

                    b.HasIndex("Type", "CanonicalValue");

                    b.HasIndex("Type", "Value");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("CortexApi.Models.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChunkCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PiiFlags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretFlags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SensitivityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sha256Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FileType");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Sha256Hash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CortexApi.Models.NoteChunk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PiiFlags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretFlags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SensitivityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Seq")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("TokenCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChunkIndex");

                    b.HasIndex("Content")
                        .HasDatabaseName("IX_NoteChunks_Content_FTS");

                    b.HasIndex("NoteId");

                    b.HasIndex("Sha256");

                    b.ToTable("NoteChunks");
                });

            modelBuilder.Entity("CortexApi.Models.NoteTag", b =>
                {
                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NoteTags");
                });

            modelBuilder.Entity("CortexApi.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CortexApi.Models.TextSpan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("End")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Start")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("NoteId", "Label");

                    b.HasIndex("Start", "End");

                    b.ToTable("TextSpans");
                });

            modelBuilder.Entity("CortexApi.Models.UserFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("ActualSensitivity")
                        .HasColumnType("REAL");

                    b.Property<string>("ActualTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActualTopic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("CortexApi.Models.Classification", b =>
                {
                    b.HasOne("CortexApi.Models.Note", "Note")
                        .WithMany("Classifications")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CortexApi.Models.Edge", b =>
                {
                    b.HasOne("CortexApi.Models.Entity", "FromEntity")
                        .WithMany("OutgoingEdges")
                        .HasForeignKey("FromEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CortexApi.Models.Entity", "ToEntity")
                        .WithMany("IncomingEdges")
                        .HasForeignKey("ToEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromEntity");

                    b.Navigation("ToEntity");
                });

            modelBuilder.Entity("CortexApi.Models.Embedding", b =>
                {
                    b.HasOne("CortexApi.Models.NoteChunk", "Chunk")
                        .WithMany("Embeddings")
                        .HasForeignKey("ChunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chunk");
                });

            modelBuilder.Entity("CortexApi.Models.Entity", b =>
                {
                    b.HasOne("CortexApi.Models.Entity", "CanonicalEntity")
                        .WithMany()
                        .HasForeignKey("CanonicalEntityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CanonicalEntity");
                });

            modelBuilder.Entity("CortexApi.Models.NoteChunk", b =>
                {
                    b.HasOne("CortexApi.Models.Note", "Note")
                        .WithMany("Chunks")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CortexApi.Models.NoteTag", b =>
                {
                    b.HasOne("CortexApi.Models.Note", "Note")
                        .WithMany("NoteTags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CortexApi.Models.Tag", "Tag")
                        .WithMany("NoteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CortexApi.Models.TextSpan", b =>
                {
                    b.HasOne("CortexApi.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CortexApi.Models.Note", "Note")
                        .WithMany("Spans")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CortexApi.Models.Entity", b =>
                {
                    b.Navigation("IncomingEdges");

                    b.Navigation("OutgoingEdges");
                });

            modelBuilder.Entity("CortexApi.Models.Note", b =>
                {
                    b.Navigation("Chunks");

                    b.Navigation("Classifications");

                    b.Navigation("NoteTags");

                    b.Navigation("Spans");
                });

            modelBuilder.Entity("CortexApi.Models.NoteChunk", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("CortexApi.Models.Tag", b =>
                {
                    b.Navigation("NoteTags");
                });
#pragma warning restore 612, 618
        }
    }
}
